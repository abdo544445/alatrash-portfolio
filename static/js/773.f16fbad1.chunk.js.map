{"version":3,"file":"static/js/773.f16fbad1.chunk.js","mappings":"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","sources":["pages/Admin.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Typography,\n  Container as MuiContainer,\n  Box,\n  Button,\n  TextField,\n  Paper as MuiPaper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  Chip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  OutlinedInput,\n  SelectChangeEvent\n} from '@mui/material';\nimport { Grid } from '../components/ui/MuiFixedComponents';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport AddIcon from '@mui/icons-material/Add';\nimport SaveIcon from '@mui/icons-material/Save';\n\n// Sample project data - in a real app this would come from Firebase\nconst initialProjects = [\n  {\n    id: '1',\n    title: 'E-Commerce Website',\n    description: 'A full-stack e-commerce platform with user authentication and payment processing.',\n    image: 'https://via.placeholder.com/300x200',\n    technologies: ['React', 'Node.js', 'MongoDB']\n  },\n  {\n    id: '2',\n    title: 'Portfolio Website',\n    description: 'A personal portfolio website showcasing projects and skills.',\n    image: 'https://via.placeholder.com/300x200',\n    technologies: ['React', 'TypeScript', 'Material-UI']\n  },\n  {\n    id: '3',\n    title: 'Task Management App',\n    description: 'A productivity app to help users manage their tasks and projects.',\n    image: 'https://via.placeholder.com/300x200',\n    technologies: ['React', 'Firebase', 'Redux']\n  }\n];\n\nconst techOptions = [\n  'React', 'TypeScript', 'JavaScript', 'Node.js', 'Express', \n  'MongoDB', 'Firebase', 'Redux', 'Material-UI', 'CSS', 'HTML',\n  'Python', 'Django', 'SQL', 'Docker', 'AWS'\n];\n\ninterface Project {\n  id: string;\n  title: string;\n  description: string;\n  image: string;\n  technologies: string[];\n}\n\nconst Admin: React.FC = () => {\n  const [projects, setProjects] = useState<Project[]>(initialProjects);\n  const [open, setOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentProject, setCurrentProject] = useState<Project>({\n    id: '',\n    title: '',\n    description: '',\n    image: '',\n    technologies: []\n  });\n\n  // In a real application, you would fetch data from Firebase\n  useEffect(() => {\n    // fetchProjects();\n  }, []);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setIsEditing(false);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setCurrentProject({\n      id: '',\n      title: '',\n      description: '',\n      image: '',\n      technologies: []\n    });\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setCurrentProject(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleTechChange = (event: SelectChangeEvent<string[]>) => {\n    const { value } = event.target;\n    setCurrentProject(prev => ({\n      ...prev,\n      technologies: typeof value === 'string' ? value.split(',') : value,\n    }));\n  };\n\n  const handleEditProject = (project: Project) => {\n    setCurrentProject(project);\n    setIsEditing(true);\n    setOpen(true);\n  };\n\n  const handleDeleteProject = (id: string) => {\n    setProjects(prev => prev.filter(project => project.id !== id));\n    // In a real app, you would also delete from Firebase\n  };\n\n  const handleSaveProject = () => {\n    if (isEditing) {\n      // Update existing project\n      setProjects(prev => \n        prev.map(project => \n          project.id === currentProject.id ? currentProject : project\n        )\n      );\n    } else {\n      // Add new project\n      const newProject = {\n        ...currentProject,\n        id: Date.now().toString(), // Simple unique ID generation\n      };\n      setProjects(prev => [...prev, newProject]);\n    }\n    // In a real app, you would save to Firebase\n    handleClose();\n  };\n\n  return (\n    <MuiContainer maxWidth=\"lg\" sx={{ py: 8 }}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>\n          <Typography variant=\"h2\" component=\"h1\">\n            Admin Dashboard\n          </Typography>\n          <Button \n            variant=\"contained\" \n            color=\"primary\"\n            startIcon={<AddIcon />}\n            onClick={handleClickOpen}\n          >\n            Add Project\n          </Button>\n        </Box>\n      </motion.div>\n\n      <MuiPaper elevation={3} sx={{ p: 3 }}>\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n          Manage Projects\n        </Typography>\n\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Title</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Technologies</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {projects.map((project) => (\n                <TableRow key={project.id}>\n                  <TableCell>{project.title}</TableCell>\n                  <TableCell>{project.description.substring(0, 100)}...</TableCell>\n                  <TableCell>\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {project.technologies.map((tech) => (\n                        <Chip key={tech} label={tech} size=\"small\" />\n                      ))}\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton onClick={() => handleEditProject(project)} color=\"primary\">\n                      <EditIcon />\n                    </IconButton>\n                    <IconButton onClick={() => handleDeleteProject(project.id)} color=\"error\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </MuiPaper>\n\n      {/* Add/Edit Project Dialog */}\n      <Dialog open={open} onClose={handleClose} maxWidth=\"md\" fullWidth>\n        <DialogTitle>{isEditing ? 'Edit Project' : 'Add New Project'}</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12}>\n              <TextField\n                name=\"title\"\n                label=\"Project Title\"\n                fullWidth\n                value={currentProject.title}\n                onChange={handleInputChange}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                name=\"description\"\n                label=\"Project Description\"\n                fullWidth\n                multiline\n                rows={4}\n                value={currentProject.description}\n                onChange={handleInputChange}\n                required\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                name=\"image\"\n                label=\"Image URL\"\n                fullWidth\n                value={currentProject.image}\n                onChange={handleInputChange}\n                required\n                helperText=\"Enter a URL for the project image\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <InputLabel id=\"technologies-label\">Technologies</InputLabel>\n                <Select\n                  labelId=\"technologies-label\"\n                  id=\"technologies\"\n                  multiple\n                  value={currentProject.technologies}\n                  onChange={handleTechChange}\n                  input={<OutlinedInput label=\"Technologies\" />}\n                  renderValue={(selected) => (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} />\n                      ))}\n                    </Box>\n                  )}\n                >\n                  {techOptions.map((tech) => (\n                    <MenuItem key={tech} value={tech}>\n                      {tech}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSaveProject} \n            color=\"primary\" \n            variant=\"contained\"\n            startIcon={<SaveIcon />}\n            disabled={!currentProject.title || !currentProject.description || !currentProject.image}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </MuiContainer>\n  );\n};\n\nexport default Admin;"],"names":["initialProjects","id","title","description","image","technologies","techOptions","Admin","projects","setProjects","useState","open","setOpen","isEditing","setIsEditing","currentProject","setCurrentProject","useEffect","handleClose","resetForm","handleInputChange","e","name","value","target","prev","_objectSpread","_jsxs","MuiContainer","maxWidth","sx","py","children","_jsx","motion","div","initial","opacity","y","animate","transition","duration","Box","display","justifyContent","alignItems","mb","Typography","variant","component","Button","color","startIcon","AddIcon","onClick","handleClickOpen","MuiPaper","elevation","p","gutterBottom","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","project","substring","flexWrap","gap","tech","Chip","label","size","IconButton","handleEditProject","EditIcon","handleDeleteProject","filter","DeleteIcon","Dialog","onClose","fullWidth","DialogTitle","DialogContent","Grid","container","spacing","mt","item","xs","TextField","onChange","required","multiline","rows","helperText","FormControl","InputLabel","Select","labelId","multiple","event","split","input","OutlinedInput","renderValue","selected","MenuItem","DialogActions","handleSaveProject","newProject","Date","now","toString","SaveIcon","disabled"],"sourceRoot":""}